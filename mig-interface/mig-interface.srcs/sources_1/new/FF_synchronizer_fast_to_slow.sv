`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 21.05.2023 15:47:25
// Design Name: 
// Module Name: FF_synchronizer_fast_to_slow
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


/*
* purpose: synchronizer from fast clock domain to slow clock domain;
*
* assumption;
* 1. fast clock domain: 150MHz; // this is the UI clock generated by the MIG interface;
* 2. slow clock domain: 100MHz; // this is the board system clock;
* 3. fast = 1.5 slow;
* 4. input data value to synchronize must be stable for three destination (slow) clock edges
*       (to avoid missed events);
*  
* Note;
* with the assumptions above; a simple double ff is sufficient (or safe?)
* if any of the assumptions is violated, then this module shall be revised again;
* 
*
* Reference:
* 1. https://www.verilogpro.com/clock-domain-crossing-part-1/#:~:text=The%20easy%20case%20is%20passing%20signals%20from%20a,these%20cases%2C%20a%20simple%20two-flip-flop%20synchronizer%20may%20suffice.
* 2. http://www.verilab.com/files/sva_cdc_paper_dvcon2006.pdf
*/


module FF_synchronizer_fast_to_slow
    #(parameter WIDTH=1)
    (
        // destination; slow domain;
        input logic clk_dest,  
        input logic rst_dest,  
        
        // source; from fast domain
        input logic [WIDTH-1:0] in_async,
        
        // to slow domain
        output logic [WIDTH-1:0] out_sync
    );
        
    logic [WIDTH-1:0] sync_reg;
    always @(posedge clk_dest, posedge rst_dest) begin
        if(rst_dest) begin
            sync_reg <= 0;
            out_sync <= 0;
        end else begin
            sync_reg <= in_async;
            out_sync <= sync_reg;            
        end
    end
    
endmodule
